rule analyzeSplicing:
    input:
        counts={output_path}/counts.txt,
        annot={output_path}/annotations_DEXSeq.gtf
    output:
        {output_path}/{sample}_out.png,
        {output_path}/maplot_out.png,
        {output_path}/dispersion_out.png,
        {output_path}/diff_exons_out.txt
    log:
        log_out={output_path}/log_analyzeSplicing.out,
        log_err={output_path}/log_analyzeSplicing.err
    params:
        cluster=config["indexBam"]["CLUSTER"],
        samtools_bin_dir=config["samtools"]["BIN_DIR"]
    run:
        R("""
        library(DEXSeq)
	library(reshape2)
	options(bitmapType='cairo')

	## Count data
	counts<-read.table("{input.counts}")
	colnames(counts)=c("cond","sraid","exon","count")
	widecount=dcast(counts, exon ~ sraid,value.var="count")
	row.names(widecount)=widecount$exon
	widecount=widecount[,-1]

	## Exon and Gene Names
	exons=sapply(strsplit(row.names(widecount), ":"),"[",2)
	genes=sapply(strsplit(row.names(widecount), ":"),"[",1)

	## Sample Annotation
	samples=unique(counts[,c(1,2)])$cond
	sampleTable <- data.frame(lapply(unique(counts[,c(1,2)]), as.character),libType="paired-end",stringsAsFactors=FALSE)
	row.names(sampleTable)=sampleTable$sraid
	sampleTable=sampleTable[,-2]
	colnames(sampleTable)=c("condition","libType")
	# on remet dans l'ordre
	sampleTable=sampleTable[colnames(widecount),]

	# Write into individual files
	countfiles=paste0(colnames(widecount),".txt")
	for(sample in colnames(widecount)){
		write.table(file=paste0(sample,".txt"),data.frame(row.names=row.names(widecount),count=widecount[,sample]),row.names=TRUE,col.names=FALSE,quote=FALSE,sep="\t")
	}

	# Create DEXSeqDataSet
	dxd= DEXSeqDataSetFromHTSeq(countfiles,sampleData=sampleTable,design=~sample+exon+condition:exon,flattenedfile="{input.annot}")

	# Stat analysis
	dxd=estimateSizeFactors(dxd)
	dxd=estimateDispersions(dxd)

	png("dispersion_out.png")
	plotDispEsts(dxd)
	dev.off()

	dxd=testForDEU(dxd)
	dxd=estimateExonFoldChanges(dxd,fitExpToVar="condition")
	dxr1=DEXSeqResults( dxd )
	dxr1=na.omit(dxr1)
	#table(dxr1$pvalue<0.1)
	write.table(file="diff_exons_out.txt",dxr1[dxr1$padj<0.1,])
	#table(tapply(dxr1$padj<0.1,dxr1$groupID,any))

	png("maplot_out.png")
	plotMA(dxr1,cex=0.8)
	dev.off()

	for(i in unique(dxr1[dxr1$padj<0.1,"groupID"])){
	      png(paste0(i,"_out.png"))
	      plotDEXSeq( dxr1,i,legend=TRUE,cex.axis=1.2,cex=1.3,lwd=2,norCounts=TRUE,splicing=TRUE,displayTranscripts=TRUE)
              dev.off()
        }
""")
